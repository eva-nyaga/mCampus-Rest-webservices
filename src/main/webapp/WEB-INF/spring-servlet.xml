<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:context="http://www.springframework.org/schema/context" xmlns:oauth="http://www.springframework.org/schema/security/oauth2" xmlns:sec="http://www.springframework.org/schema/security"
xmlns:mvc="http://www.springframework.org/schema/mvc"
xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

	<!-- Scans the classpath of this application for Spring annotations such 
		as @Component, @Service, @Controller and @Repositry to deploy as beans. For 
		example, the ClaimsService is annotated with @Service("claimsService") which 
		means that spring will automatically create a bean with the name claimsService. 
	-->
<context:component-scan base-package="org.springframework.security.oauth" />

<!-- The OAuth2 protected resources are separated out into their own block so we can deal with authorization and error handling
separately. This isn't mandatory, but it makes it easier to control the behaviour. -->
<http pattern="/photos/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security">
<anonymous enabled="false" />
<intercept-url pattern="/photos" access="ROLE_USER,SCOPE_READ" />
<intercept-url pattern="/photos/trusted/**" access="ROLE_CLIENT,SCOPE_TRUST" />
<intercept-url pattern="/photos/user/**" access="ROLE_USER,SCOPE_TRUST" />
<intercept-url pattern="/photos/**" access="ROLE_USER,SCOPE_READ" />
<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
<access-denied-handler ref="oauthAccessDeniedHandler" />
</http>



<http pattern="/claims/.*" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security">
<anonymous enabled="false" />
<intercept-url pattern="/claims.*" method="POST" access="ROLE_USER,SCOPE_TRUST" />
<intercept-url pattern="/claims.*" method="GET" access="ROLE_CLIENT,SCOPE_READ" />
<intercept-url pattern="/claims/search.*" method="GET" access="ROLE_CLIENT,SCOPE_READ" />
<intercept-url pattern="/claims/returns.*" method="POST" access="ROLE_CLIENT,SCOPE_WRITE" />
<intercept-url pattern="/claims/**.*" method="PUT" access="ROLE_USER,SCOPE_TRUST" />
<intercept-url pattern="/claims/**.*" method="DELETE" access="ROLE_USER,SCOPE_TRUST" />
<intercept-url pattern="/claims/switched/**.*" method="PUT" access="ROLE_CLIENT,SCOPE_WRITE" />
<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
<access-denied-handler ref="oauthAccessDeniedHandler" />
</http>

<http pattern="/claims.*" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security">
<anonymous enabled="false" />
<!--
<intercept-url pattern="/claims.*" method="POST" access="ROLE_USER,SCOPE_WRITE" />
-->
<intercept-url pattern="/claims.*" method="GET" access="ROLE_CLIENT,SCOPE_READ" />
<intercept-url pattern="/claims/search.*" method="GET" access="ROLE_CLIENT,SCOPE_READ" />
<intercept-url pattern="/claims/returns.*" method="POST" access="ROLE_CLIENT,SCOPE_WRITE" />
<intercept-url pattern="/claims/**.*" method="PUT" access="ROLE_USER,SCOPE_WRITE" />
<intercept-url pattern="/claims/**.*" method="DELETE" access="ROLE_USER,SCOPE_WRITE" />
<intercept-url pattern="/claims/switched/**.*" method="PUT" access="ROLE_CLIENT,SCOPE_WRITE" />
<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
<access-denied-handler ref="oauthAccessDeniedHandler" />
</http>

    <!-- Create the XStream marshaller bean -->
	<bean id="xstreamMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
		<property name="autodetectAnnotations" value="true" />
		<!-- Set some properties to make the outputted xml look nicer -->
		<property name="aliases">
			<map>
			<!--	<entry key="claims" value="org.springframework.security.oauth.api.model.healthcare.clients.ClaimsWrapper" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				<entry key="claim" value="org.springframework.security.oauth.api.model.healthcare.clients.Claim" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				
				<entry key="schemes" value="org.springframework.security.oauth.api.model.healthcare.clients.SchemesWrapper" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				<entry key="scheme" value="org.springframework.security.oauth.api.model.healthcare.clients.Scheme" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				
				<entry key="benefits" value="org.springframework.security.oauth.api.model.healthcare.clients.BenefitsWrapper" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				<entry key="benefit" value="org.springframework.security.oauth.api.model.healthcare.clients.Benefit" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				
				<entry key="benefitCategories" value="org.springframework.security.oauth.api.model.healthcare.clients.BenefitCategoriesWrapper" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				<entry key="benefitCategory" value="org.springframework.security.oauth.api.model.healthcare.clients.BenefitCategory" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				
				<entry key="members" value="org.springframework.security.oauth.api.model.healthcare.clients.MembersWrapper" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				<entry key="member" value="org.springframework.security.oauth.api.model.healthcare.clients.Member" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				
				<entry key="providers" value="org.springframework.security.oauth.api.model.healthcare.providers.ProvidersWrapper" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				<entry key="provider" value="org.springframework.security.oauth.api.model.healthcare.providers.Provider" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />

				<entry key="moneyadditions" value="org.springframework.security.oauth.api.model.healthcare.clients.MoneyAdditionsWrapper" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				<entry key="moneyaddition" value="org.springframework.security.oauth.api.model.healthcare.clients.MoneyAddition" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />

				<entry key="claimservices" value="org.springframework.security.oauth.api.model.healthcare.clients.ClaimServicesWrapper" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				<entry key="claimservice" value="org.springframework.security.oauth.api.model.healthcare.clients.ClaimService" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				
				-->
			<!--	<entry key="cardreprints" value="org.springframework.security.oauth.api.model.healthcare.clients.CardreprintsWrapper" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				<entry key="cardreprint" value="org.springframework.security.oauth.api.model.healthcare.clients.Cardreprint" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				-->
				<!--<entry key="users" value="org.springframework.security.oauth.api.model.healthcare.clients.UsersWrapper" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				<entry key="user" value="org.springframework.security.oauth.api.model.healthcare.clients.User" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
	            
				 <entry key="logins" value="org.springframework.security.oauth.api.model.healthcare.clients.LoginsWrapper" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				<entry key="login" value="org.springframework.security.oauth.api.model.healthcare.clients.Login" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				
				<entry key="people" value="org.springframework.security.oauth.api.model.healthcare.clients.PeopleWrapper" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
				<entry key="person" value="org.springframework.security.oauth.api.model.healthcare.clients.Person" />
				<entry key="apimessage" value="org.springframework.security.oauth.api.model.healthcare.clients.ApiMessage" />
		              -->
			</map>
		</property>
		<property name="implicitCollections">
			<map>
				<!--<entry key="org.springframework.security.oauth.api.model.healthcare.clients.ClaimsWrapper" value="claims" />
				<entry key="org.springframework.security.oauth.api.model.healthcare.clients.SchemesWrapper" value="schemes" />	
				<entry key="org.springframework.security.oauth.api.model.healthcare.clients.BenefitsWrapper" value="benefits" />
				<entry key="org.springframework.security.oauth.api.model.healthcare.clients.BenefitCategoriesWrapper" value="benefitCategories" />
				<entry key="org.springframework.security.oauth.api.model.healthcare.clients.MembersWrapper" value="members" />
				<entry key="org.springframework.security.oauth.api.model.healthcare.providers.ProvidersWrapper" value="providers" />
				-->
<!--
				<entry key="org.springframework.security.oauth.api.model.healthcare.clients.CardreprintsWrapper" value="cardreprints" />
				-->
			<!--	<entry key="org.springframework.security.oauth.api.model.healthcare.clients.MoneyAdditionsWrapper" value="moneyadditions" />

				<entry key="org.springframework.security.oauth.api.model.healthcare.clients.ClaimServicesWrapper" value="claimservices" />
				
				<entry key="org.springframework.security.oauth.api.model.healthcare.clients.LoginsWrapper" value="logins" />
				
				<entry key="org.springframework.security.oauth.api.model.healthcare.clients.UsersWrapper" value="users" />
				
				<entry key="org.springframework.security.oauth.api.model.healthcare.clients.PeopleWrapper" value="people" />
-->
			</map>
		</property>
	</bean>
	
	
	<!-- Configures the different content types the servlet can handle. -->
	<bean name="viewResolver"
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">

		<property name="ignoreAcceptHeader" value="true" />
		<property name="favorParameter" value="true" />
		<property name="favorPathExtension" value="true" />
		<!-- if no content type is specified, return json. -->
		<property name="defaultContentType" value="application/json" />

		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
                                <entry key="jsonp" value="application/javascript"/>
			</map>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
					<!-- see http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/web/servlet/view/json/MappingJacksonJsonView.html#setExtractValueFromSingleKeyModel(boolean) -->
					<property name="extractValueFromSingleKeyModel" value="true" />
				</bean>
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<constructor-arg ref="xstreamMarshaller" />
					<!-- see http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/web/servlet/view/xml/MarshallingView.html#setModelKey(java.lang.String) -->
					<property name="modelKey" value="responseObject" />
				</bean>
                                <bean class="org.springframework.security.oauth.api.utils.MappingJacksonJsonpView"/>
			</list>
		</property>
	</bean>

<bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
<property name="realmName" value="sparklr" />
</bean>

<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased" xmlns="http://www.springframework.org/schema/beans">
<constructor-arg>
<list>
<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
<bean class="org.springframework.security.access.vote.RoleVoter" />
<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
</list>
</constructor-arg>
</bean>

<authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security" />

<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.JdbcTokenStore">
        <constructor-arg ref="jdbcTemplate" />
</bean>

    <bean id="jdbcTemplate"
      class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
      <property name="url" value="jdbc:mysql://192.180.3.7:3306/oauthdb"/>
      <property name="username" value="smartauth"/>
      <property name="password" value="authclient"/>
   </bean>


<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
<property name="tokenStore" ref="tokenStore" />
<property name="supportRefreshToken" value="true" />
<property name="clientDetailsService" ref="clientDetails" />
</bean>


<oauth:resource-server id="resourceServerFilter" resource-id="sparklr" token-services-ref="tokenServices" />

    <bean id="clientDetails" class="org.springframework.security.oauth2.provider.JdbcClientDetailsService">
            <constructor-arg ref="jdbcTemplate" />
    </bean>

	<!-- Activates support for XML and JSON mapping if they are on the class path. -->
	<mvc:annotation-driven>
		<!-- we are adding an XStream converter to the default list. It seems that 
			if we do not include this section, then marshalling will work, but unmarshalling 
			will not, instead we get a "Unsupported Media Type". -->
		<mvc:message-converters>
			<!-- Configure the XStream message converter -->
			<bean
				class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
				<property name="marshaller" ref="xstreamMarshaller" />
				<property name="unmarshaller" ref="xstreamMarshaller" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	


<mvc:annotation-driven />

<mvc:default-servlet-handler />

<sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
<!--you could also wire in the expression handler up at the layer of the http filters. See https://jira.springsource.org/browse/SEC-1452 -->
<sec:expression-handler ref="oauthExpressionHandler" />
</sec:global-method-security>

<oauth:expression-handler id="oauthExpressionHandler" />


<bean id="photoController" class="org.springframework.security.oauth.examples.sparklr.mvc.PhotoController">
<property name="photoService" ref="photoServices" />
</bean>

<bean id="photoServices" class="org.springframework.security.oauth.examples.sparklr.impl.PhotoServiceImpl">
<property name="photos">
<list>
<bean class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">
<property name="id" value="1" />
<property name="name" value="photo1.jpg" />
<property name="userId" value="marissa" />
<property name="resourceURL" value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo1.jpg" />
</bean>
<bean class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">
<property name="id" value="2" />
<property name="name" value="photo2.jpg" />
<property name="userId" value="paul" />
<property name="resourceURL" value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo2.jpg" />
</bean>
<bean class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">
<property name="id" value="3" />
<property name="name" value="photo3.jpg" />
<property name="userId" value="marissa" />
<property name="resourceURL" value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo3.jpg" />
</bean>
<bean class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">
<property name="id" value="4" />
<property name="name" value="photo4.jpg" />
<property name="userId" value="paul" />
<property name="resourceURL" value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo4.jpg" />
</bean>
<bean class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">
<property name="id" value="5" />
<property name="name" value="photo5.jpg" />
<property name="userId" value="marissa" />
<property name="resourceURL" value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo5.jpg" />
</bean>
<bean class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">
<property name="id" value="6" />
<property name="name" value="photo6.jpg" />
<property name="userId" value="paul" />
<property name="resourceURL" value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo6.jpg" />
</bean>
</list>
</property>
</bean>

</beans>